(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{648:function(e,t,a){"use strict";a.r(t);var r=a(0),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"concepts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#concepts"}},[e._v("#")]),e._v(" Concepts")]),e._v(" "),a("h2",{attrs:{id:"worker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#worker"}},[e._v("#")]),e._v(" Worker")]),e._v(" "),a("p",[e._v("A worker is an off-chain process that is triggered by a Tendermint event. The module includes a "),a("code",[e._v("start-worker")]),e._v(" tx command that will listen for Tendermint events and trigger user-defined event handlers. Before use, the worker must be initialized with the necessary event handlers. This should be done in the "),a("code",[e._v("/cmd/<appName>d/cmd/root.go")]),e._v(" file.")]),e._v(" "),a("h3",{attrs:{id:"workerhelper"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#workerhelper"}},[e._v("#")]),e._v(" WorkerHelper")]),e._v(" "),a("p",[e._v("The Oracle module provides some useful utility functions for running worker handlers and submitting results (see "),a("code",[e._v("/x/oracle/client/cli/workerHleper.go")]),e._v(").")]),e._v(" "),a("h2",{attrs:{id:"claim"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#claim"}},[e._v("#")]),e._v(" Claim")]),e._v(" "),a("p",[e._v("A Claim is an abstract type that represents the result of an off-chain worker process. All claims must have a "),a("code",[e._v("Type")]),e._v(". You must specify a list of "),a("code",[e._v("ClaimTypes")]),e._v(" and their settings in the oracle module's "),a("code",[e._v("ClaimParams")]),e._v(" parameter.")]),e._v(" "),a("h2",{attrs:{id:"vote"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vote"}},[e._v("#")]),e._v(" Vote")]),e._v(" "),a("p",[e._v("A "),a("code",[e._v("Vote")]),e._v(" is a "),a("code",[e._v("Claim")]),e._v(" submitted by a validator. Votes are tallied using the validator power to determine consensus.")]),e._v(" "),a("h2",{attrs:{id:"prevote"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prevote"}},[e._v("#")]),e._v(" Prevote")]),e._v(" "),a("p",[e._v("ClaimType parameters can be configured to require a "),a("code",[e._v("Prevote")]),e._v(". This is highly recomended because it reduces centralization and free-rider risk in the Oracle. Whith prevote enabled, before submitting the actual claim data, the validator must submit a hash of a random salt + cliam hash + validator address. After the prevote round is over, validators submit their "),a("code",[e._v("Vote")]),e._v(" wich includes the actual "),a("code",[e._v("Claim")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"round"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#round"}},[e._v("#")]),e._v(" Round")]),e._v(" "),a("p",[e._v("All Claims must belong to a Round. Round duration can be set via "),a("code",[e._v("ClaimParams")]),e._v(". It can be as short as 1 block, or longer.")]),e._v(" "),a("h3",{attrs:{id:"pendingrounds"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pendingrounds"}},[e._v("#")]),e._v(" PendingRounds")]),e._v(" "),a("p",[e._v("When a new Vote is cast, the associate "),a("code",[e._v("Round")]),e._v(" will be added to the pending que if its not already there.")]),e._v(" "),a("h3",{attrs:{id:"latestfinalizedround"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#latestfinalizedround"}},[e._v("#")]),e._v(" LatestFinalizedRound")]),e._v(" "),a("p",[e._v("Once a round is finalized (consensus is reached), "),a("code",[e._v("LatestFinalizedRound")]),e._v(" is updated with the roundId. Claims for with a "),a("code",[e._v("RoundId")]),e._v(" lower than the "),a("code",[e._v("LatestFinalizedRound")]),e._v(" are not accepted.")]),e._v(" "),a("h2",{attrs:{id:"tallying-votes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tallying-votes"}},[e._v("#")]),e._v(" Tallying Votes")]),e._v(" "),a("p",[e._v("Apps relying on the Oracle will most likely want to tally the oracle votes. This can be done in some module's "),a("code",[e._v("EndBlock")]),e._v(" method. The Oracle Module provides a helper method for tallying the votes that returns the "),a("code",[e._v("RoundResult")]),e._v(" struct once the required vote threshold has been met.")]),e._v(" "),a("h2",{attrs:{id:"housekeeping"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#housekeeping"}},[e._v("#")]),e._v(" HouseKeeping")]),e._v(" "),a("p",[e._v("It is the responsibility of the app using the oracle module to remove stale oracle data.")]),e._v(" "),a("ul",[a("li",[e._v("Once it is determined that a Claim has reached consensus, the app should let the Oracle know this by calling "),a("code",[e._v("FinalizeRound")]),e._v(". This will remove the "),a("code",[e._v("Round")]),e._v(" from the pending que and updated "),a("code",[e._v("LatestFinalizedRound")]),e._v(" and remove all votes and claims associated with the round.")])]),e._v(" "),a("h2",{attrs:{id:"rewards-and-punishments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rewards-and-punishments"}},[e._v("#")]),e._v(" Rewards and Punishments")]),e._v(" "),a("p",[e._v("Rewards and Slashing logic is outside of the scope of the Oracle module. Modules relying on oracle data may implement their own logic. We reccomend taking a look at the (https://docs.terra.money/dev/spec-oracle.html#concepts)[Terra Oracle] and the (https://github.com/PeggyJV/sommelier/tree/main/x/oracle)[Sommelier Oracle] for examples.")]),e._v(" "),a("h2",{attrs:{id:"validator-delegation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#validator-delegation"}},[e._v("#")]),e._v(" Validator Delegation")]),e._v(" "),a("p",[e._v("Validators are able to delegate oracle responsibilities to a cosmos address of their choice.")])])}),[],!1,null,null,null);t.default=s.exports}}]);